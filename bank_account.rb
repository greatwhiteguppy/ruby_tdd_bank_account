class BankAccount
    attr_reader :checking, :savings, :account
    #removed interest_rate from reader so it isn't accessible to user to spark error
    @@no_of_accounts = 0
    def initialize checking, savings, interest_rate=0.01, account = create_account
        @checking = checking
        @savings = savings
        @interest_rate = interest_rate
        @account = account
        @@no_of_accounts +=1
        puts "Created account #{@@no_of_accounts}"
        puts "New account --  Number: #{@account} Checking Amount: $#{@checking} Savings Amount: $#{@savings} Interest Rate #{@interest_rate}%"
    end

    def savings_account
        puts "Current savings account balance: $#{@savings}"
    end

    def checking_account
        puts "Current checking account balance: $#{@checking}"
    end

    def deposit_checking i
        @checking += i
        puts "Deposit of $" +i.to_s+". Current checking account balance: $#{@checking}"
    end

    def deposit_savings i
        @savings += i
        puts "Deposit of $" +i.to_s+". Current savings account balance: $#{@savings}"
    end

    def withdraw_checking i
        @checking -= i
        if @checking < 0
            puts "insufficient funds"
            puts "Current checking account balance: $#{@checking}"
        else
            puts "withdraw successful"
            puts "Current checking account balance: $#{@checking}"
        end
    end

    def withdraw_savings i
        @savings -= i
        if @savings < 0
            puts "Insufficient funds. Current savings account balance: $#{@savings}"
        else
            puts "Withdraw successful. Current savings account balance: $#{@savings}"
        end
    end

    def view_total
        puts "Checking and savings: $#{@checking + @savings}"
        # self
    end

    def account_information
        puts "Account information --  Number: #{@account} Checking Amount: $#{@checking} Savings Amount: $#{@savings} Interest Rate #{@interest_rate}%"
    end

    private
        def create_account
            Array.new(5).map{rand(10)}.join
        end
end

b = BankAccount.new(0,0)
b.view_total
b.account_information
c = BankAccount.new(50,100)
c.account_information
c.withdraw_checking(51)
b.deposit_savings(5000)


# BankAccount should have a method that returns a user's account number, account number should be generated by a private method, account number should be random
# BankAccount should have a method that returns the user's checking account balance
#BankAccount should have a method that returns the user's saving account balance
# BankAccount should allow a user to deposit money into either their checking or saving account
# BankAccount should allow a user to withdraw money from one of their accounts, return an error if there are insufficient funds
# BankAccount should allow the user to view the total amount of money they have at the bank
# BankAccount should track how many accounts the bank currently has Add an interest_rate attribute that is not accessible by the user. Set it to 0.01
# BankAccount should have a method called account_information that displays the users account number, total money, checking account balance, saving account balance and interest rate
# A user should not be able to set any attributes from the BankAccount class
